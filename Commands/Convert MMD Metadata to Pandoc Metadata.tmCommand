<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env perl

my $g_metadata;

# Parse stdin (MultiMarkdown file)

undef $/;
$text .= &lt;&gt;;

$text = _ParseMetaData($text);

if ( $g_metadata{Title} || $g_metadata{Author} || $g_metadata{Date} ) {
	print "% $g_metadata{Title}\n";
	print "% $g_metadata{Author}\n";
	print "% $g_metadata{Date}\n";
	delete $g_metadata{Title};
	delete $g_metadata{Author};
	delete $g_metadata{Date};
}

for my $key ( keys %g_metadata ) {
    my $value = $g_metadata{$key};
    print "$key: $value\n";
}

print "$text\n";



# Perl trim function to remove whitespace from the start and end of the string
sub trim
{
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}
# Left trim function to remove leading whitespace
sub ltrim
{
	my $string = shift;
	$string =~ s/^\s+//;
	return $string;
}
# Right trim function to remove trailing whitespace
sub rtrim
{
	my $string = shift;
	$string =~ s/\s+$//;
	return $string;
}


# Clipped from MultiMarkdown.pl
#
# MultiMarkdown Routines
#

sub _ParseMetaData {
	my $text = shift;
	my $clean_text = "";
	
	my ($inMetaData, $currentKey) = (1,'');
	
	# If only metadata is "Format: complete" then skip
	
	if ($text =~ s/^(Format):\s*complete\n(.*?)\n/$2\n/is) {
		# If "Format: complete" was added automatically, don't force first 
		#	line of text to be metadata
		$g_metadata{$1}= "complete";
		$g_document_format = "complete";
	}
	
	foreach my $line ( split /\n/, $text ) {
		$line =~ /^$/ and $inMetaData = 0;
		if ($inMetaData) {
			if ($line =~ /^([a-zA-Z0-9][0-9a-zA-Z _-]*?):\s*(.*)$/ ) {
				$currentKey = $1;
				my $meta = $2;
				$currentKey =~ s/\s+/ /g;
				$currentKey =~ s/\s$//;
				$g_metadata{$currentKey} = trim($meta);
				if (lc($currentKey) eq "format") {
					$g_document_format = lc($g_metadata{$currentKey});
				}
				if (lc($currentKey) eq "base url") {
					$g_base_url = $g_metadata{$currentKey};
				}
				if (lc($currentKey) eq "bibliography title") {
					$g_bibliography_title = $g_metadata{$currentKey};
					$g_bibliography_title =~ s/\s*$//;
				}
				if (lc($currentKey) eq "base header level") {
					$g_base_header_level = $g_metadata{$currentKey};
				}
				if (!$g_metadata_newline{$currentKey}) {
					$g_metadata_newline{$currentKey} = $g_metadata_newline{default};
				}
			} else {
				if ($currentKey eq "") {
					# No metadata present
					$clean_text .= "$line\n";
					$inMetaData = 0;
					next;
				}
				if ($line =~ /^\s*(.+)$/ ) {
					$g_metadata{$currentKey} .= "$g_metadata_newline{$currentKey}$1";
				}
			}
		} else {
			$clean_text .= "$line\n";
		}
	}
		
	return $clean_text;
}</string>
	<key>input</key>
	<string>document</string>
	<key>name</key>
	<string>Convert MMD Metadata to Pandoc Metadata</string>
	<key>output</key>
	<string>replaceDocument</string>
	<key>scope</key>
	<string>text.html.markdown.pandoc, text.html.markdown.multimarkdown</string>
	<key>uuid</key>
	<string>0AD3F1A6-18CD-459E-90F3-D216F6DC2F62</string>
</dict>
</plist>
